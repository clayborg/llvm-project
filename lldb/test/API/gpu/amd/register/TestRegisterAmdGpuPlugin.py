"""
Register tests for the AMDGPU plugin.
"""

import lldb
from amdgpu_testcase import AmdGpuTestCaseBase
import lldbsuite.test.lldbutil as lldbutil
from lldbsuite.test.lldbtest import *
from lldbsuite.test.decorators import *

# Expected size of a wavefront in threads.
WAVE_SIZE = 64

# These values should match the ones written to the registers in the test program.
# You can use `gen.py` in this directory to regenerate this list if needed.
VGPR_VALUES = [
    0xA3B1799D,
    0x46685257,
    0x392456DE,
    0xBC8960A9,
    0x6C031199,
    0x07A0CA6E,
    0x37F8A88B,
    0x8B8148F6,
    0x386ECBE0,
    0x96DA1DAC,
    0xCE4A2BBD,
    0xB2B9437A,
    0x571AA876,
    0x27CD8130,
    0x562B0F79,
    0x17BE3111,
    0x18C26797,
    0xD8F56413,
    0x9A8DCA03,
    0xCE9FF57F,
    0xBACFB3D0,
    0x89463E85,
    0x60E7A113,
    0x8D5288F1,
    0xDC98D2C1,
    0x93CD59BF,
    0xB45ED1F0,
    0x19DB3AD0,
    0x47294739,
    0x5D65A441,
    0x5EC42E08,
    0xA5E5A5AB,
    0xBAA80DD4,
    0x29D4BEEF,
    0x6123FDF7,
    0x8E944239,
    0xAF42E12F,
    0xC6A7EE39,
    0x50C187FC,
    0x448AAA9E,
    0x508EBAD7,
    0xA7CAD415,
    0x757750A9,
    0x43CF2FDE,
    0x95A76D79,
    0x663F1C97,
    0xFF5E9FF0,
    0x827050A8,
    0x1C11F735,
    0xA0A04DC4,
    0x10435A10,
    0xFF01CF99,
    0x877409A9,
    0xB88139B9,
    0xA4161293,
    0x1C8EAEE9,
    0x6F4CC69A,
    0x74273CA3,
    0xE9A1FA6F,
    0x9BE578C7,
    0x2720797D,
    0xC333E861,
    0x52FBE43B,
    0x04FC6D82,
    0xEDD96831,
    0x4EB93EFF,
    0x0ED42F1A,
    0xF26B4776,
    0xC40DB9B4,
    0x8CBFEDB0,
    0x4FCCA39A,
    0xA65E688E,
    0x847FD9B4,
    0x1EFA2197,
    0x3985C3CF,
    0x568CC69B,
    0x38602AB6,
    0xA18FF6B6,
    0x3A9BEDD4,
    0xE7C99B26,
    0xDC1110C1,
    0x3CEDDF2D,
    0xAB4220A7,
    0x7900F7F9,
    0xC8DCD19F,
    0xCEB81F9D,
    0x30BEB45F,
    0x6E595ED3,
    0x6C6FA611,
    0xBAA4B71A,
    0x1931E9EE,
    0xDC96925E,
    0x3FA7F104,
    0x72D8567D,
    0x6C006F61,
    0x474EBC19,
    0xEC5B227C,
    0x8CE21EA3,
    0xD605E770,
    0xF8102383,
    0xD9441FA5,
    0x2A935D62,
    0x7C52FA17,
    0x0F02BAD0,
    0x610461E3,
    0xFC3D3348,
    0x747B6DBA,
    0xB7E99ACA,
    0x27A0C3D7,
    0x4BF50B52,
    0xF7FD5646,
    0x8ACD4E10,
    0xBF7B539B,
    0x0EA2622B,
    0x958CA9BA,
    0x284D82E5,
    0x2F923996,
    0x98543881,
    0x3C365296,
    0x98326856,
    0x9E8FC965,
    0x85D51695,
    0xEF48E8D5,
    0xB758588D,
    0x3D1A85DD,
    0x655238A6,
    0x4CCC9BC2,
    0x12922F83,
    0xFF002D4D,
    0x43E42CAF,
    0xEEEA163E,
    0xE1805081,
    0xE117DAC3,
    0x5E9953D2,
    0x286218B8,
    0xB41B3143,
    0xA9D3D7C7,
    0x2260E70F,
    0x8DA01097,
    0x45B89CD9,
    0x9AD620AB,
    0xB7B56EA7,
    0x7D106C60,
    0xD89A40C0,
    0x46D483F3,
    0x00E85ECE,
    0xC56811CD,
    0x430F801D,
    0xBDC14F1F,
    0x0279B6A6,
    0xE767DCEA,
    0x8BABCE3B,
    0xD5A804EB,
    0x25E97977,
    0x20A04502,
    0x4EEA04E7,
    0xDC570131,
    0xE61FECC0,
    0x1A50AEC3,
    0xEE0CAEB5,
    0xDD56CC94,
    0xCF8EBC5A,
    0xE1A47E10,
    0x0658663A,
    0xEE49F329,
    0xCF8D446A,
    0x444D610B,
    0x1BAC27A7,
    0xDF465290,
    0xDBCCC477,
    0x38F16A81,
    0x75D66ED4,
    0x3A43B2BA,
    0x3170F437,
    0x5408F9AC,
    0xDD463C09,
    0x4774BC58,
    0x89456F27,
    0xF071D879,
    0xF86C2CA2,
    0x43F59A85,
    0x6F3F920C,
    0x504D281F,
    0x82EC9F2D,
    0x939B462D,
    0x41357E8C,
    0xB572F3D0,
    0xABAE4F43,
    0x5D3D9E56,
    0xD9178793,
    0x688C7015,
    0x2095EEF6,
    0xF0BBAC67,
    0xE71E43A6,
    0x4D0B0D1A,
    0x001A9A8B,
    0x49732D6C,
    0xA79AC9AA,
    0x77097749,
    0x15B52908,
    0x55CEE5DB,
    0xC04A96C4,
    0xAC3C5640,
    0x32FA2DE8,
    0x0640BE0F,
    0x12A4DEF0,
    0xB24445A7,
    0x7E8F8095,
    0x3E75C3B4,
    0x6CD66193,
    0x8498E113,
    0xD92C9227,
    0x74DAAEBF,
    0xCD29A36F,
    0x986F9025,
    0xE4347D51,
    0x81392443,
    0x8C41561B,
    0xE5AF6E39,
    0x79844388,
    0xA33DC7AF,
    0x8573E793,
    0xA07295E9,
    0x464C04AF,
    0x49257AF1,
    0x458F1F19,
    0x8A476A87,
    0x236C7B87,
    0x3B33F3D8,
    0xB1A6B1F1,
    0xB4D7E28E,
    0x10714D51,
    0x68586EBA,
    0x8AE8905B,
    0x6A702E2F,
    0x6B8E869F,
    0xB20DCB6E,
    0x6160A6B4,
    0x5A0CDD7C,
    0xC0E3BEFD,
    0x3875394C,
    0x382C043F,
    0x6F92F25E,
    0x076E2BBA,
    0x06F028FF,
    0xA48B3DBE,
    0x7631DE9D,
    0x0CDF742B,
    0x610CF373,
    0x362F5E5C,
    0x53AC2AB9,
    0x610E6A64,
    0xD4F8FD72,
    0x14F7CE8D,
    0x8A175DFE,
    0x59970043,
]
SGPR_VALUES = [
    0xA66FD7F7,
    0xA6D964A3,
    0xC1156D6D,
    0xF319C125,
    0x2702878B,
    0x20500494,
    0xAB61A7B1,
    0x37CC863B,
    0xB31022F0,
    0xC4536F1D,
    0xD1BDB8C0,
    0xF6F7F0CC,
    0xF54AD0A2,
    0xB70B3420,
    0xA092F52A,
    0xC5C14EB4,
    0xC85ACA46,
    0x5EDDBBBF,
    0x575AED2C,
    0xD97DC9CD,
    0xD284476C,
    0x1B049863,
    0xF5F62C97,
    0xD4262982,
    0xB5122DF8,
    0x6F7C15EA,
    0x7BC67E1F,
    0x44B591F7,
    0xDA09DFA0,
    0x162F8A24,
    0xE1B294DE,
    0x6105716B,
    0x0758E201,
    0xD9D80B8D,
    0x2E8D0E87,
    0x364D7C87,
    0xCC3EBDDE,
    0x57207246,
    0xF2B43ABF,
    0x15EABB27,
    0xB856D035,
    0xC2171429,
    0xB0CBC61F,
    0x7DA67785,
    0xCAFDA613,
    0x17D2582E,
    0x38BA8ABC,
    0xB118F68D,
    0x94E0D3BA,
    0x87EA7FF5,
    0x54AEBD1B,
    0xB3EE4D3B,
    0x455AC762,
    0x405BFDC9,
    0x314D3441,
    0x2F65FAFA,
    0x7BF47042,
    0x31B1B099,
    0x3A3C563E,
    0x2DEFE193,
    0x88BD13D1,
    0x4639447B,
    0xF96B648A,
    0x8DA8EEE4,
    0x7DAA39F0,
    0xDF6A8F93,
    0x92F5DF7B,
    0x782A65E0,
    0x70C2903F,
    0x0D270659,
    0x7A4C75D4,
    0xD2762BDC,
    0x6694C343,
    0x0DB95301,
    0x4DC82A1E,
    0xFE716B14,
    0xC3B290D0,
    0x85C7504B,
    0x715629EE,
    0xFD72B050,
    0x9EFBA58B,
    0xBD767E35,
    0x3605BF54,
    0xA911D192,
    0x2834E4C0,
    0x1337739E,
    0x00AF5B3A,
    0x980402A2,
    0x4A8FF810,
    0x3B4206C5,
    0xB4FB0EB9,
    0x743B65A2,
    0xAFF8754D,
    0xEC856F37,
    0xEF04E57D,
    0x6CD5E859,
    0x8B6870B5,
    0xA5CB63A2,
    0xE88DA719,
    0xD39E198B,
    0x1247EA4E,
    0x49E2623D,
]
AGPR_VALUES = [
    0x1FD5A423,
    0xB04D3376,
    0xB321BF21,
    0xF1533AE8,
    0x7E695D0D,
    0x40181C6E,
    0x176132ED,
    0xF366BAD4,
    0xC19AD58C,
    0xA6C9537F,
    0xEA83BF00,
    0x95D82980,
    0x175BA98D,
    0x5913F9D3,
    0x5553B2FE,
    0xAB8DDEB4,
    0xDB946570,
    0x546E035A,
    0xB194990B,
    0xF1F8343E,
    0x8CD321B0,
    0x746F7891,
    0x50843242,
    0x52C21221,
    0xFCF56188,
    0x8AE769ED,
    0x69CA97D2,
    0xC1A6423B,
    0xA01AC992,
    0xC28EBD70,
    0x341C6494,
    0x8C99A894,
    0xED7BF656,
    0xB2C08394,
    0x1F15C7B6,
    0x288B78B5,
    0x8D03C91E,
    0x8D605936,
    0x17DC8EFF,
    0xE9B5C5CF,
    0xD50755D9,
    0xB77350CA,
    0x45FF2C83,
    0xD5B077E0,
    0xFAF14FF0,
    0x3E652603,
    0x8D1FB540,
    0x6232B17A,
    0xE11B868D,
    0xDD30DE89,
    0x6A39AAA6,
    0x81FB18B3,
    0xD20F87D0,
    0x260A5962,
    0x89E06AB3,
    0x585A0AFA,
    0x8B1E3B9D,
    0xB28F41DE,
    0x9261549D,
    0xC68A152F,
    0x0B2C782A,
    0xBEA4FF31,
    0xCFB87E6F,
    0xFB16E5DB,
    0x097A1E10,
    0x9716108E,
    0xDEA4AE17,
    0x70B7E868,
    0x74F93D17,
    0xB8F21423,
    0x2784378F,
    0xF81DBAA1,
    0xB15516BC,
    0xA65BB1F2,
    0xDA0D4A5F,
    0xC268283E,
    0x118405AD,
    0xEBC2026F,
    0xFF574E2B,
    0xBF2C14A0,
    0xDF615A5C,
    0x7194EAE2,
    0xB1AA0F6A,
    0xE746CCB9,
    0x0BC61066,
    0xCBD00EF2,
    0x4B1A269B,
    0x5FF595EA,
    0x25440FE0,
    0x87FA841A,
    0xCAE28E66,
    0x2B840C67,
    0xDEEF580F,
    0x3DA70577,
    0x24A35CF2,
    0x4104A8B5,
    0xCDFC6EE0,
    0xE6B5A92C,
    0x28711733,
    0x966B1964,
    0x40066FF2,
    0xD865D69A,
    0x7BB38605,
    0x3CB98350,
    0x92698698,
    0x9326DFFD,
    0x4B943E30,
    0xA881BFD3,
    0x464458B4,
    0xCC8218DA,
    0x5A31B4CC,
    0xA2F963A3,
    0x9EF2B93E,
    0xD69D42F1,
    0xA0D4DE3D,
    0xA5769411,
    0x70D9C9F8,
    0x945EF2E4,
    0xBB7BEE03,
    0x4B8C5BDC,
    0xBF5AE7E6,
    0x2CF6BF75,
    0xF8B38A8B,
    0xE9DA484A,
    0xD499DA99,
    0xCE7607AD,
    0x1D7BC313,
    0xF6802CDB,
    0xF76C8EDE,
    0xFADD7EA3,
    0x5DA36F1B,
    0xCA6A2224,
    0x03902C5D,
    0x895CCD99,
    0x746CDB77,
    0xAC1E86D8,
    0x95A5BAFA,
    0xF0B6F83F,
    0x3BDBC09E,
    0x8FB864E4,
    0xD2E82F38,
    0x688613DB,
    0x23C86D30,
    0xF23E323D,
    0x7E1CA5A1,
    0x18E19331,
    0x22BAE10E,
    0x7421FF46,
    0xF396EA37,
    0x5EDB0D3C,
    0x71818DCF,
    0xF3579560,
    0xDAFEC8A9,
    0xAF88BDEC,
    0x5BD20C98,
    0x65EC7ACD,
    0x74685B98,
    0xA9AB364A,
    0x0577AEA9,
    0xC96B5EDB,
    0x90882EAF,
    0xDEA45C19,
    0x00B9D4A3,
    0x2CABD7E7,
    0x06998731,
    0x03CDE2E3,
    0x52E2AFD9,
    0x2C9B662E,
    0x0D6A05B3,
    0xBDE13C1B,
    0x86AD8A8C,
    0xBEE3EB79,
    0x79EB4168,
    0xC72C1FE3,
    0x1BEAF6AC,
    0x80FB9296,
    0x857DD3B3,
    0xF6CA6B8B,
    0x66D06371,
    0xAFA415E5,
    0xE8E22743,
    0x14AEAF5C,
    0x9BB96155,
    0x10D08D11,
    0x533F5A72,
    0x87D292A6,
    0x9AFD4015,
    0xB3A7D0E0,
    0x370BC063,
    0x3A7E8E14,
    0x74188109,
    0x18578BAF,
    0x6D4067F4,
    0xAA448259,
    0xEC48BF55,
    0x112FA612,
    0xD4EF00AA,
    0x17DDED81,
    0xBD21BC11,
    0xCFD01CBD,
    0x8E6E5003,
    0x1F4A8CA1,
    0xC012A0FF,
    0xB8976EC5,
    0xF7E8F8E5,
    0x99B479D4,
    0x5A057C11,
    0x36760CE5,
    0xA81FDEC3,
    0x1BB43332,
    0x5E187B24,
    0xC33A1F6C,
    0x92F837D4,
    0xCEA60F4C,
    0x44777442,
    0x2E2FBF77,
    0x56FEBFB9,
    0x01902620,
    0xDEAF528D,
    0x6699CD99,
    0x07D924CE,
    0x3712F2D1,
    0x6B7A2460,
    0x5744F596,
    0x5EBBCCA5,
    0xB8BA8368,
    0x0D77C5A0,
    0x9E2AA4AC,
    0xAC8936BC,
    0x45A88829,
    0xA974D079,
    0x7129CEC7,
    0x45EE432D,
    0x1D2324E6,
    0x6E0ED1E8,
    0xAAC93316,
    0x0BA078E8,
    0x996D5C50,
    0x01F7C7EC,
    0x4169B9FC,
    0x53FFD3A2,
    0x01FA964E,
    0xBF3C5140,
    0x2CFA55B0,
    0xB423CCDE,
    0xCE6322B6,
    0x12738A23,
    0x0AD45230,
    0x04CC3EDE,
    0xEBD14D2C,
    0xDCB33DF3,
    0x9364F3D0,
    0x92CA525A,
    0x6AEDFDC7,
    0x1D7C0098,
    0x532401FC,
]


class RegisterAmdGpuTestCase(AmdGpuTestCaseBase):
    def run_to_reg_gpu_breakpoint(self, reg_base):
        source = "reg.hip"
        gpr = f"{reg_base.upper()}GPR"
        gpu_threads = self.run_to_gpu_breakpoint(
            source, f"// GPU BREAKPOINT - {gpr}", "// CPU BREAKPOINT - BEFORE LAUNCH"
        )
        self.assertNotEqual(None, gpu_threads, "GPU should be stopped at breakpoint")
        self.select_gpu()

    def test_vgrp_read_write(self):
        self.do_reg_read_write_tests("v", VGPR_VALUES)

    def test_sgrp_read_write(self):
        self.do_reg_read_write_tests("s", SGPR_VALUES)

    @expectedFailureAll("Read/Write of AGPR registers is working yet")
    def test_agrp_read_write(self):
        self.do_reg_read_write_tests("a", AGPR_VALUES)

    def do_reg_read_write_tests(self, reg_base, known_values):
        """Verify we can read and write the values to registers.
        Values in `known_values` will be written to increasingly
        numbered gprs (e.g v0, v1, ...)."""
        self.build()
        self.run_to_reg_gpu_breakpoint(reg_base)

        for i, value in enumerate(known_values):
            reg = f"{reg_base}{i}"

            # First read the register and verify the expected value.
            self.reg_read(reg, value)

            # Now clear the register and verify the value is 0.
            self.verify_reg_write(reg, 0)

            # Now write the original value back the register.
            # This makes sure we are writing back all the bytes.
            self.verify_reg_write(reg, value)

    def test_vector_lane_read_write(self):
        self.build()
        self.run_to_reg_gpu_breakpoint("v")

        # First check that the register is initialized to the expected value.
        vgpr = [VGPR_VALUES[0]] * WAVE_SIZE
        self.reg_read("v0", vgpr)

        # Make sure we can modify only a few lanes of the register.
        vgpr[1] = 0x10101010
        vgpr[2] = 0x20202020
        vgpr[4] = 0x40404040
        self.verify_reg_write("v0", vgpr)

    def reg_read(self, gpr, expected):
        """Read a value from a register."""
        reg_value_str = f"{gpr} = " + self.get_reg_value_str(gpr, expected)
        self.expect(f"register read {gpr}", substrs=[reg_value_str])

    def reg_write(self, gpr, value):
        """Write a value to a register."""
        reg_value = self.get_reg_value_str(gpr, value)
        self.runCmd(f'register write {gpr} "{reg_value}"')

    def verify_reg_write(self, gpr, value):
        """Write the value to a register and verify we read back the same value."""
        self.reg_write(gpr, value)
        self.reg_read(gpr, value)

    def is_vector_reg(self, gpr):
        """Return true if the register is a vector register."""
        return gpr.startswith("v") or gpr.startswith("a")

    def get_reg_value_str(self, gpr, value):
        """Return the string representation used by lldb for the value in the register.
        Expands the value to the correct width if needed for vector registers.
        """
        if self.is_vector_reg(gpr):
            value = self.expand_vector_reg_list(value)
            return self.get_vector_reg_str(value)
        else:
            return self.get_scalar_reg_str(value)

    def expand_vector_reg_list(self, value, fill=None):
        """Expand the values to a full wave of values.
        If the value is a scalar, then splat the remaining lanes with the value unless
        a fill value is provided.

        If the value is a list, then splat the remaining lanes with the fill value or
        0 if no fill value is provided.
        """
        if not isinstance(value, list):
            value = [value]
            # If a fill value was not provided then use the first value in the list
            # to splat across the remaining lanes.
            if fill is None:
                fill = value[0]

        # If no fill value was provided, then use 0.
        if fill is None:
            fill = 0

        # Generate the missing values for each lane in the vector register.
        lane_values = [fill] * WAVE_SIZE
        for i, lane in enumerate(value):
            lane_values[i] = lane
        return lane_values

    def get_vector_reg_str(self, lanes):
        """Return the string representation used for a vector register class."""
        self.assertTrue(isinstance(lanes, list), "lanes must be a list")
        self.assertTrue(len(lanes) == WAVE_SIZE, "lanes must be WAVE_SIZE long")
        reg_value = "{"
        reg_value += " ".join([self.convert_32bit_value_to_bytes(v) for v in lanes])
        reg_value += "}"

        return reg_value

    def get_scalar_reg_str(self, value):
        return f"0x{value:08x}"

    def convert_32bit_value_to_bytes(self, value):
        """Convert to a space separated list of bytes in little-endian order."""
        le_byte_values = [(value >> (8 * i)) & 0xFF for i in range(4)]
        return " ".join([f"0x{b:02x}" for b in le_byte_values])
